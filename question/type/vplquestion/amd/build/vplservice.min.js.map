{"version":3,"sources":["../src/vplservice.js"],"names":["define","$","url","getAjaxUrl","vplId","userId","file","undefined","relativeUrl","VPLService","cache","reqfile","execfiles","info","filesType","Deferred","resolve","promise","VPLUtil","requestAction","then","response","files","save","questionId","answer","filestype","ajax","data","id","qid","method","exec","action","terminal","callback","options","ajaxurl","resultSet","setResult","result","this","close","_this","setTimeout","execerror","M","util","get_string","getConsole","run","type","conInfo","ws","connect","executionURL","done","webSocketMonitor","call","service","args","progressBar","setLabel","isClosed","langOfFile","fileName","langType","split","pop","isBinary"],"mappings":"AAuBAA,QAAQ,SAAU,YAAa,SAASC,EAAGC,GASvC,SAASC,EAAWC,EAAOC,EAAQC,GAI/B,YAHaC,IAATD,IACAA,EAAO,QAEJJ,EAAIM,YAAY,kBAAoB,IAAMF,EAAO,gBAAkBF,EAAQ,WAAaC,EAAS,WAG5G,IAAII,KAGAC,GACAC,WACAC,cAqFJ,OAhFAH,EAAWI,KAAO,SAASC,EAAWV,GAClC,YAA+BG,GAA3BG,EAAMI,GAAWV,GACVH,EAAEc,WAAWC,QAAQN,EAAMI,GAAWV,IAAQa,WAEzB,WAAbH,EACXI,QAAQC,cAAc,aAAc,MAAQhB,EAAWC,EAAO,KAC9Dc,QAAQC,cAAc,OAAQ,MAAQhB,EAAWC,EAAO,GAAI,oBAE/DgB,KAAK,SAASC,GACX,IAAIC,EAAqB,WAAbR,EACRO,EAASC,MAAM,GACfD,EAASC,MAEb,OADAZ,EAAMI,GAAWV,GAASkB,EACnBA,IACRL,WAKXR,EAAWc,KAAO,SAASnB,EAAOoB,EAAYC,EAAQC,GAClD,OAAOzB,EAAE0B,KAAKzB,EAAIM,YAAY,uDAC1BoB,MACIC,GAAIzB,EACJ0B,IAAKN,EACLC,OAAQA,EACRC,UAAWA,GAEfK,OAAQ,SACTd,WAOPR,EAAWuB,KAAO,SAASC,EAAQ7B,EAAOC,EAAQ6B,EAAUC,GAExD,IAAIC,GACAC,QAASlC,EAAWC,EAAOC,GAC3BiC,WAAW,EACXC,UAAW,SAASC,GAChBC,KAAKH,WAAY,EACjBH,EAASK,IAEbE,MAAO,WAMH,IAAIC,EAAQF,KACZG,WAAW,WACFD,EAAML,WACPH,GAAUU,UAAWC,EAAEC,KAAKC,WAAW,mBAAoB,wBAEhE,MAIPC,WAAY,WACR,OAAOf,GAEXgB,IAAK,SAASC,EAAMC,EAASC,GACzB,IAAIV,EAAQF,KACZP,EAASoB,QAAQF,EAAQG,aAAc,WACnCF,EAAGX,QACEC,EAAML,WAEPH,UAMhB,OAAOjB,QAAQC,cAAcc,EAAQ,MAAQG,EAAQC,SACpDmB,KAAK,SAASnC,GACXH,QAAQuC,iBAAiBpC,EAAU,GAAI,GAAIe,KAC5CnB,YAIHyC,KAAM,SAASC,KAAYC,GAcvB,OAZA1C,QAAQ2C,YAAc,WAClBpB,KAAKqB,SAAW,aAGhBrB,KAAKC,MAAQ,aAGbD,KAAKsB,SAAW,WACZ,OAAO,IAIRtD,EAAWkD,MAAYC,IAGlCI,WAAY,SAASC,GACjB,OAAO/C,QAAQgD,SAASD,EAASE,MAAM,KAAKC,QAGhDC,SAAU,SAASJ,GACf,OAAO/C,QAAQmD,SAASJ","file":"vplservice.min.js","sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides utility method to communicate with a VPL (this is an API wrapper to use VPLUtil)\n * @copyright  Astor Bizard, 2019\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// VPLUtil has to be loaded to use this module.\n/* globals VPLUtil */\ndefine(['jquery', 'core/url'], function($, url) {\n\n    /**\n     * Build ajax url to call with VPLUtil.\n     * @param {String|Number} vplId VPL ID.\n     * @param {String|Number} userId User ID.\n     * @param {String} file (optional) Ajax file to use. Defaults to edit.\n     * @return {String} The ajax url built.\n     */\n    function getAjaxUrl(vplId, userId, file) {\n        if (file === undefined) {\n            file = 'edit';\n        }\n        return url.relativeUrl('/mod/vpl/forms') + '/' + file + '.json.php?id=' + vplId + '&userId=' + userId + '&action=';\n    }\n\n    var VPLService = {};\n\n    // Cache for info.\n    var cache = {\n        reqfile: [],\n        execfiles: []\n    };\n\n    // Retrieve specified files from the VPL (either 'reqfile' or 'execfile').\n    // Note : these files are stored in cache. To clear it, the user has to reload the page.\n    VPLService.info = function(filesType, vplId) {\n        if (cache[filesType][vplId] != undefined) {\n            return $.Deferred().resolve(cache[filesType][vplId]).promise();\n        } else {\n            var deferred = filesType == 'reqfile' ?\n                VPLUtil.requestAction('resetfiles', '', {}, getAjaxUrl(vplId, '')) :\n                VPLUtil.requestAction('load', '', {}, getAjaxUrl(vplId, '', 'executionfiles'));\n            return deferred\n            .then(function(response) {\n                var files = filesType == 'reqfile' ?\n                    response.files[0] :\n                    response.files;\n                cache[filesType][vplId] = files;\n                return files;\n            }).promise();\n        }\n    };\n\n    // Save student answer to VPL, by replacing {{ANSWER}} in the template by the student answer.\n    VPLService.save = function(vplId, questionId, answer, filestype) {\n        return $.ajax(url.relativeUrl('/question/type/vplquestion/ajax/savetovpl.json.php'), {\n            data: {\n                id: vplId,\n                qid: questionId,\n                answer: answer,\n                filestype: filestype\n            },\n            method: 'POST'\n        }).promise();\n    };\n\n    // Execute the specified action (should be 'run' or 'evaluate').\n    // Note that this function does not call save, it has to be called beforehand if needed.\n    // Note also that callback may be called several times\n    // (especially one time with (false) execution error and one time right after with execution result).\n    VPLService.exec = function(action, vplId, userId, terminal, callback) {\n        // Build the options object for VPLUtil.\n        var options = {\n            ajaxurl: getAjaxUrl(vplId, userId),\n            resultSet: false,\n            setResult: function(result) {\n                this.resultSet = true;\n                callback(result);\n            },\n            close: function() {\n                // If connection is closed without a result set, display an error.\n                // /!\\ It can happen that result will be set about 0.3s after closing.\n                // -> Set a timeout to avoid half-second display of error.\n                // Note : if delay between close and result is greater than timeout, it is fine\n                // (there will just be a 0.1s error display before displaying the result).\n                var _this = this;\n                setTimeout(function() {\n                    if (!_this.resultSet) {\n                        callback({execerror: M.util.get_string('execerrordetails', 'qtype_vplquestion')});\n                    }\n                }, 600);\n            },\n\n            // The following will only be used for the 'run' action.\n            getConsole: function() {\n                return terminal;\n            },\n            run: function(type, conInfo, ws) {\n                var _this = this;\n                terminal.connect(conInfo.executionURL, function() {\n                    ws.close();\n                    if (!_this.resultSet) {\n                        // This may happen for the run action.\n                        callback({});\n                    }\n                });\n            }\n        };\n\n        return VPLUtil.requestAction(action, '', {}, options.ajaxurl)\n        .done(function(response) {\n            VPLUtil.webSocketMonitor(response, '', '', options);\n        }).promise();\n    };\n\n    return {\n        call: function(service, ...args) {\n            // Deactivate VPLUtil progress bar, as we have our own progress indicator.\n            VPLUtil.progressBar = function() {\n                this.setLabel = function() {\n                    return;\n                };\n                this.close = function() {\n                    return;\n                };\n                this.isClosed = function() {\n                    return true;\n                };\n            };\n            // Call service.\n            return VPLService[service](...args);\n        },\n\n        langOfFile: function(fileName) {\n            return VPLUtil.langType(fileName.split('.').pop());\n        },\n\n        isBinary: function(fileName) {\n            return VPLUtil.isBinary(fileName);\n        }\n    };\n});\n"]}